#pragma checksum "C:\Projects\Core\Core2.2\aspnetcore_template.MVC\Views\Home\Grid.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "518cb1dfe4ad3bfebc2efbf42f873e86ff16414c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Grid), @"mvc.1.0.view", @"/Views/Home/Grid.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Grid.cshtml", typeof(AspNetCore.Views_Home_Grid))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Projects\Core\Core2.2\aspnetcore_template.MVC\Views\Home\Grid.cshtml"
using aspnetcore_template.ViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"518cb1dfe4ad3bfebc2efbf42f873e86ff16414c", @"/Views/Home/Grid.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2f0d0a8222bf1d9bd71ff9c96fd1707d2fc9e42c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Grid : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<aspnetcore_template.ViewModels.HomePageViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Projects\Core\Core2.2\aspnetcore_template.MVC\Views\Home\Grid.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#line 6 "C:\Projects\Core\Core2.2\aspnetcore_template.MVC\Views\Home\Grid.cshtml"
  
    ViewBag.Title = "Home";


#line default
#line hidden
            BeginContext(188, 7002, true);
            WriteLiteral(@"   
<div id=""wrapper"">
    <div id=""main"">
        <div class=""container"">
            <br />
            <div style=""width:90%; margin:0 auto;"">
                <table id=""restaurant-table"" class=""display select"" cellspacing=""0"" width=""100%"">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Cuisine</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>

    </div>
    <script>
        loadTable();
        function loadTable() {
            table = $('#restaurant-table').DataTable({

                ""processing"": true,
                ""scrollX"": false,
                ""lengthMenu"": [[10, 25, 50, -1], [10, 25, 50, ""All""]],
                ""pageLength"": 10,
                stateSave: true,
                dom: 'lBfrtip',
               
                ""filterOptions"": {
                    se");
            WriteLiteral(@"archButton: ""Search"",
                    clearSearchButton: ""ClearSearch"",
                    searchContainer: ""SearchContainer""
                },
                ""serverSide"": true,
                ""ajax"": {
                    ""url"": ""/home/AjaxRestaurants"",
                    ""type"": ""POST"",
                    //data: function (d) {
                    //    d.cuisine = 3;
                    //}
                },
                ""columns"": [
                    { ""data"": ""id"" },
                    { ""data"": ""name"" },
                    { ""data"": ""cuisine"" }
                ],
                ""aoColumnDefs"": [
                    {
                        'targets': 0,
                        'checkboxes': {
                            'selectRow': false,
                            'orderable': false,
                            'className': 'select-checkbox'
                        }
                    },
                    {
                        'targets': 1,
   ");
            WriteLiteral(@"                     'visible': true,
                        'orderable':true
                    },
                    // Actions column not orderable
                    {
                        'targets': 2,
                        'orderable': true
                    }
                ],
                'stateSaveParams': function (settings, data) {
                    data.columns.forEach(function (column) {
                        delete column.visible;
                    });
                },

                'select': {
                    'style': 'multi'
                },
            });

            table.search('').columns().search('').draw();

        $(document).contextmenu({
            delegate: "".dataTable tr"",
            menu: [
                { title: ""<i class='glyphicon-margin glyphicon glyphicon-remove' style='color: orange'></i> Cancel Row Update"", cmd: ""remove"" },
                { title: ""<i class='glyphicon-margin glyphicon glyphicon-remove-sign' st");
            WriteLiteral(@"yle='color: orange'></i> Cancel All Rows Update"", cmd: ""removeall"" },
                { title: ""<i class='glyphicon-margin glyphicon glyphicon-floppy-disk glyphicon-margin' style='color: green'></i> Update Selected Rows"", cmd: ""update"" },
                { title: ""<i class='glyphicon-margin glyphicon glyphicon-trash glyphicon-margin' style='color: red'></i> Delete Selected Rows"", cmd: ""delete"" },
                { title: ""<i class='glyphicon-margin glyphicon glyphicon-plus glyphicon-margin' style='color: blue'></i> Create New Row"", cmd: ""add"" },
                { title: ""<i class='glyphicon-margin glyphicon glyphicon-floppy-disk glyphicon-margin' style='color: blue'></i> ...Save New Row"", cmd: ""addupdate"" },
            ],

            selector: 'span.context-menu',
            className: 'css-title',
            select: function (event, ui) {
                var row = ui.target.closest(""tr"")
                switch (ui.cmd) {
                    case ""remove"":
                        CancelRowEdi");
            WriteLiteral(@"t(row);
                        break;
                    case ""removeall"":
                        CancelAllRowsEdit(row);
                        break;
                    case ""update"":
                        UpdateConfigMaint(row);
                        break;
                    case ""add"":
                        AddRow(row);
                        break;
                    case ""addupdate"":
                        AddUpdateRow(row);
                        break;
                    case ""delete"":
                        DeleteSelectedRows();
                        break;
                }
            },
            beforeOpen: function (event, ui) {
            var $menu = ui.menu,
            $target = ui.target,
            extraData = ui.extraData;
            ui.menu.zIndex(9999);
            }
        });
        table.MakeCellsEditable({
        //dataTables cellEdit
            ""columns"": [1, 2, 3, 4],
            ""inputTypes"": [
                {
        ");
            WriteLiteral(@"            ""column"": 1, // NAME
                    ""css"": ""edittext"",  // edit text box width
                    ""maxLength"": 9,
                    ""required"": true
                },
                {
                    ""column"": 2, // Cuisine
                    ""css"": ""edittext"",  // edit text box width
                    ""maxLength"": 3
                },
              {
                    ""column"": 3, // Cuisine
                    ""css"": ""edittext"",  // edit text box width
                    ""maxLength"": 3
                },
              {
                    ""column"": 4, // Cuisine
                    ""css"": ""edittext"",  // edit text box width
                    ""maxLength"": 3
                }]
        }),
            $(""body"")
                .tooltip({
                    selector: '[data-toggle=""tooltip""]',
                    container: 'body'
                });
        };

        function CancelRowEdit(e) {
            if ($('#newrow').length) {
          ");
            WriteLiteral(@"      $('#newrow').remove();
            }
            $(this).UnselectRow(e);
        }
        function CancelAllRowsEdit(e) {
            $(this).UnselectAllRows($(e));
        }

        function ResetSort() {
            localStorage.removeItem('DataTables_' + window.location.pathname);
            table.order.neutral().draw();
        }

        function UpdateConfigMaint(e) {
            var row = $(e).closest('tr');
            var form = $('#table-form').closest('form');
            if (form.valid()) {
                UpdateSelectedConfigMaint(row);
            }
        }

        $(document)
            .on('click',
            '#btnQuery',
            function (e) {
                e.preventDefault();
                var id = this.id;
                table.ajax.reload();

            });

    </script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<aspnetcore_template.ViewModels.HomePageViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
